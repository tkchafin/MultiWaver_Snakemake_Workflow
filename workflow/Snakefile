# The main entry point of your workflow.
# After configuring, running snakemake -n in a clone of this repository should successfully execute a dry-run of the workflow.

configfile: "config.yaml"
report: "report/workflow.rst"

# Allow users to fix the underlying OS via singularity.
singularity: "docker://continuumio/miniconda3"

reps = list(range(1,101))

rule all:
	input:
		expand('data/rep_{rep}.seg', rep=reps),
		expand('data/rep_{rep}.multiwave.out', rep=reps),
		expand('data/rep_{rep}.multiwave.log', rep=reps)

# rules for updating genetic map and generating MareyMap inputs
rule convert_map:
	input:
		"data/coords.tsv" 
	output:
		"data/coords.tsv.liftover"
	params:
		chainfile="data/canFam2ToCanFam3.over.chain.gz",
		header_chrom="chr",
		header_bp="bp",
		out_header="liftover.bp"
	threads: 1
	conda:
		"envs/myenv.yaml"
	shell:
		"python3 scripts/liftoverCoords.py -t {input} -f {params.chainfile} -c {params.header_chrom} -n {params.out_header} -p {params.header_bp}"

rule build_multiwave:
	input:
		"data/coords.tsv.liftover"
	output:
		"data/rep_{rep}.seg"
	params:
		Rdatapath="./data"
	threads: 1
	conda:
		"envs/myenv.yaml"
	shell:
		"Rscript --vanilla scripts/table2multiwaver.R {output} {input} {params.Rdatapath}"

rule run_multiwave:
	input:
		"data/rep_{rep}.seg"
	output:
		out="data/rep_{rep}.multiwave.out",
		log="data/rep_{rep}.multiwave.log"
	threads: 16
	conda:
		"envs/myenv.yaml"
	shell:
		"~/MultiWaveInfer-2.0/bin/MultiWaveInfer2 -i {input} -o {output.out} --log {output.log} --waves 3 --bootstrap 100 --threads {threads}"

include: "rules/other.smk"
